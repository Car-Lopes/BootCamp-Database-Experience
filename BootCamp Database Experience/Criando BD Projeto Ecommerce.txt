-- criando BD para cenario E-Commerce

Create database ecommerce;
use ecommerce;

-- Criando table cliente
create table clients(
	idClient int auto_increment primary key,
    Fname varchar(15),
    Minit char(3),
	Lname varchar(20),
    CPF char(11) not null,
    Address varchar(45),
    constraint unique_cpf_client unique (CPF)
);

-- Criando table produto
-- size = dimensão do produto
create table product(
	idProduct int auto_increment primary key,
    Pname varchar(45) not null,
    Classification bool default false,
	Category enum('Eletronico','Vestimenta','Brinquedos','Alimentos','Moveis') not null,
    Avaliação float default 0,
    Size varchar(10),
    DocTotal float
);

-- Criando table payments 
-- criar depois
	create table payments(
        idclient int,
		idPayment int,
        typePayment enum('Boleto', 'Cartao') not null,
		LimitAvailable float,
        primary key (idClient,idPayment)
);


-- Criando table cartao credito
-- criar depois
create table creditCard(
	idcreditCard int auto_increment,
	NumCreditCard char (15) not null,
    DtValid date not null,
    constraint numCreditCard unique (NumCreditCard)
);


use information_schema
desc referential_constraints;
select * from referential_constraints where constraint_schema = 'ecommerce'
-- Criando table pedido
-- SendValue (Frete)
create table orders(
	idOrder int auto_increment primary key,
    idOrderClient int not null,
    OrderStatus ENUM('Processando', 'Cancelado', 'Enviado', 'Entregue') default 'Processando',
    OrderDescription varchar(255),
    SendValue float default 10,
    PaymentCash boolean default false,
	idOrdersPayment int,
  -- add depois constraint fk_order_payment foreign key (idOrdersPayment) references payments(idPayment),
	constraint fk_order_client foreign key (idOrderClient) references clients(idClient)
);

-- Criando table estoque
create table productStorage(
	idProductStorage int auto_increment primary key,
    storageLocation varchar(45) not null,
    Quantity int not null default 0
);

-- Criando table Fornecedor
create table supplier(
	idSupplier int auto_increment primary key,
    SocialName varchar(255) not null,
    CNPJ char(15) not null,
    Contact char(11) not null,
	constraint unique_supplierCNPJ unique (CNPJ)
);

-- criando table vendedor
create table seller(
	idSeller int auto_increment primary key,
    CNPJ char(15) not null,
    CPF char(9) not null,
    RazaoSocial varchar(255) not null,
    SocialName varchar(255) not null,
    LocalSeller varchar(255), 
    Contact char(11) not null,
    constraint fk_seller_CNPJ unique (CNPJ),
    constraint fk_seller_CPF unique (CPF),
	constraint fk_seller_RazaoSocial unique (RazaoSocial)
 ); 
 
 
 -- criando table relacionamentos
 
 create table productSeller(
	idPseller int,
    idProduct int,
    Quantity int default 1,
    primary key (idPseller,idProduct),
    constraint fk_product_seller foreign key (idPseller) references seller(idSeller),
    constraint fk_product_product foreign key (idProduct) references product(idProduct)
 );
 
 create table productOrder(
	idPOproduct int,
    idPOorder int,
	poQuantity int default 1,
    poStatus ENUM('Disponivel', 'Sem Estoque') default 'Disponivel',
    primary key (idPOproduct,idPOorder),
    constraint fk_productOrder_product foreign key (idPOproduct) references product(idProduct),
    constraint fk_productorder_order foreign key (idPOorder) references orders(idOrder)
 );
 
 create table storageLocation(
	idLproduct int,
    idLstorage int,
    location varchar(255) not null,
    primary key (idLproduct,idLstorage),
    constraint fk_storagelocation_product foreign key (idLproduct) references product(idProduct),
    constraint fk_storagelocation_storage foreign key (idLstorage) references productStorage(idProductStorage)
 );
 
 create table productSupplier(
	 idPsSupplier int,
     idPsProduct int,
     quantity int not null,
     primary key (idPsSupplier,idPsProduct),
     constraint fk_productSupplier_supplier foreign key (idPsSupplier) references supplier(idSupplier),
	 constraint fk_productSupplier_product foreign key (idPsProduct) references product(idProduct)
 );